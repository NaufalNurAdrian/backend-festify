generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_id       Int           @id @default(autoincrement())
  username      String
  email         String        @unique
  password      String
  phone         String?
  referralCode  String        @unique
  referredBy_id Int?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  coupon        Coupon?       @relation(fields: [coupon_id], references: [coupon_id])
  coupon_id     Int?
  loginAttempt  Int           @default(0)
  isVerify      Boolean       @default(false)
  isSuspend     Boolean       @default(false)
  refferal_id   ReferralLog?  @relation(fields: [referral_id], references: [referral_id])
  Event         Event[]
  Transaction   Transaction[]
  Review        Review[]
  referral_id   Int?
  points        Int           @default(0)
  avatar        String?
}

model Event {
  event_id    Int         @id @default(autoincrement())
  title       String
  description String?
  location    String
  startTime   DateTime
  endTime     DateTime
  status      EventStatus @default(ACTIVE)
  isFree      Boolean     @default(false)
  organizer   User        @relation(fields: [user_id], references: [user_id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user_id     Int
  thumbnail   String
  slug        String      @unique
  category    Category
  Ticket      Ticket[]
  Promotion   Promotion[]
  Review      Review[]
}

model Ticket {
  ticket_id   Int           @id @default(autoincrement())
  type        TicketType
  price       Int           @default(0)
  seats       Int
  event       Event         @relation(fields: [event_id], references: [event_id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  event_id    Int
  lastOrder   DateTime
  OrderDetail OrderDetail[]
}

model OrderDetail {
  order_id    Int           @id @default(autoincrement())
  qty         Int
  ticketId    Ticket        @relation(fields: [ticket_id], references: [ticket_id])
  ticket_id   Int
  Transaction Transaction[]
}

model Transaction {
  transaction_id  Int           @id @default(autoincrement())
  user            User          @relation(fields: [user_id], references: [user_id])
  totalPrice      Float
  paymentMethod   PaymentMethod
  referralUsed    Boolean       @default(false)
  discount        Coupon?       @relation(fields: [coupon_Id], references: [coupon_id])
  transactionDate DateTime      @default(now())
  payment         Payment?
  createdAt       DateTime      @default(now())
  user_id         Int
  orderDetail     OrderDetail   @relation(fields: [orderDetail_id], references: [order_id])
  coupon_Id       Int?
  orderDetail_id  Int
}

model Coupon {
  coupon_id      Int           @id @default(autoincrement())
  discountAmount Float         @default(0.0)
  used           Boolean
  expiresAt      DateTime
  Transaction    Transaction[]
  User           User[]
}

model ReferralLog {
  referral_id   Int      @id @default(autoincrement())
  pointsAwarded Int
  createdAt     DateTime @default(now())
  expiresAt     DateTime
  used          Boolean
  User          User[]
}

model Payment {
  payment_id     Int           @id @default(autoincrement())
  transaction    Transaction   @relation(fields: [transaction_id], references: [transaction_id])
  paymentMethod  PaymentMethod
  paymentStatus  PaymentStatus @default(PENDING)
  amount         Float
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  transaction_id Int           @unique
  expierdAt      DateTime
  redirect_url   String?
}

model Promotion {
  promotion_id Int      @id @default(autoincrement())
  code         String   @unique
  event        Event    @relation(fields: [event_id], references: [event_id])
  discount     Float    @default(0.0)
  maxUsage     Int
  currentUsage Int      @default(0)
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  event_id     Int
}

model Review {
  review_id Int      @id @default(autoincrement())
  event     Event    @relation(fields: [event_id], references: [event_id])
  user      User     @relation(fields: [user_id], references: [user_id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  event_id  Int
  user_id   Int
}

enum EventStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  EWALLET
}

enum TicketType {
  STANDARD
  VIP
  VVIP
}

enum Category {
  MUSIC
  FILM
  SPORT
  EDUCATION
}
